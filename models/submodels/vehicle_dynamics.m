function [ax, ay, theta_dot_dot] = vehicle_dynamics(vx, vy, theta_dot, psi, Fx, Fy)
    
    % Load params
    p = load('params.mat');
    m = p.m;
    I = p.I;
    CW_1_X = p.CW_1_X;
    CW_2_X = p.CW_2_X;
    CW_3_X = p.CW_3_X;
    CW_4_X = p.CW_4_X;
    CW_1_Y = p.CW_1_Y;
    CW_2_Y = p.CW_2_Y;
    CW_3_Y = p.CW_3_Y;
    CW_4_Y = p.CW_4_Y;
    
    % Longitudinal force on each wheel (traction - rolling resistance)
    Fresx1 = Fx(1);
    Fresx2 = Fx(2);
    Fresx3 = Fx(3);
    Fresx4 = Fx(4);
   
    % Calculate acceleration in x-direction
    ax = (1/m) * (...
        Fresx1 * cos(psi(1)) - Fy(1) * sin(psi(1)) + ...
        Fresx2 * cos(psi(2)) - Fy(2) * sin(psi(2)) + ...
        Fresx3 * cos(psi(3)) - Fy(3) * sin(psi(3)) + ...
        Fresx4 * cos(psi(4)) - Fy(4) * sin(psi(4))) + theta_dot * vy;
    
    % Calculate acceleration in y-direction
    ay = (1/m) * (...
        Fresx1 * sin(psi(1)) + Fy(1) * cos(psi(1)) + ...
        Fresx2 * sin(psi(2)) + Fy(2) * cos(psi(2)) + ...
        Fresx3 * sin(psi(3)) + Fy(3) * cos(psi(3)) + ...
        Fresx4 * sin(psi(4)) + Fy(4) * cos(psi(4))) - theta_dot * vx;
    
    % Calculate acceleration in yaw-direction
    theta_dot_dot = (1/I) * (...
        CW_1_X * Fresx1 * sin(psi(1)) - CW_1_Y * Fresx1 * cos(psi(1)) + ...
        CW_2_X * Fresx2 * sin(psi(2)) - CW_2_Y * Fresx2 * cos(psi(2)) + ...
        CW_3_X * Fresx3 * sin(psi(3)) - CW_3_Y * Fresx3 * cos(psi(3)) + ...
        CW_4_X * Fresx4 * sin(psi(4)) - CW_4_Y * Fresx4 * cos(psi(4)) + ...
        CW_1_Y * Fy(1) * sin(psi(1)) + CW_1_X * Fy(1) * cos(psi(1)) + ...
        CW_2_Y * Fy(2) * sin(psi(2)) + CW_2_X * Fy(2) * cos(psi(2)) + ...
        CW_3_Y * Fy(3) * sin(psi(3)) + CW_3_X * Fy(3) * cos(psi(3)) + ...
        CW_4_Y * Fy(4) * sin(psi(4)) + CW_4_X * Fy(4) * cos(psi(4)));
    
end